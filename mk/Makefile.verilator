# SPDX-License-Identifier: BSD-3-Clause
#
# Makefile.verilator
#
# Include this file for verilator-related variables and commands.
# It sets VERILATOR_LINT_OPTS, VERILATOR_OPTS to defaults if not already defined.
#
# Requires the following defined in the including Makefile:
# VERILATOR (usually from black-parrot-tools/Makefile.common)
# BASE_DIR (usually from Makefile.common)
# from test Makefile:
# VERILATOR_LINT_DIR
# VERILATOR_LINT_FLIST
# VERILATOR_LINT_CONFIG
# VERILATOR_LINT_LOG
# VERILATOR_LINT_TOP
# VERILATOR_TOP (defaults to testbench)
# VERILATOR_FLIST
# VERILATOR_CONFIG
# HDL_PARAMS (optional, for -pvalue directives)
# HDL_DEFINES (optional, for +define+ directives)
# CFG (optional, specify the BP configuration)
#
# Also requires rules defined for $(VERILATOR_LINT_FLIST) and $(VERILATOR_LINT_CONFIG), if they need to be
# built dynamically.

export VERILATOR_CONFIG_BASE := $(BASE_DIR)/lint_settings.verilator

## Tools
CC ?= $(GCC)
VERILATOR ?= $(VERILATOR)

###############
### Linting ###
###############

VERILATOR_LINT_DEFAULT_OPTS = --lint-only -Wall -Wno-unoptflat -Wno-timescalemod
VERILATOR_LINT_DEFAULT_OPTS += --top-module $(VERILATOR_LINT_TOP)
VERILATOR_LINT_DEFAULT_OPTS += -f $(VERILATOR_LINT_FLIST)
VERILATOR_LINT_DEFAULT_OPTS += $(VERILATOR_LINT_CONFIG)

VERILATOR_LINT_OPTS         ?= $(VERILATOR_LINT_DEFAULT_OPTS)

$(VERILATOR_LINT_CONFIG): | $(VERILATOR_LINT_DIR)
lint_config.verilator: $(VERILATOR_LINT_CONFIG)

$(VERILATOR_LINT_FLIST): | $(VERILATOR_LINT_DIR)
lint_flist.verilator: $(VERILATOR_LINT_FLIST)

lint.verilator: $(VERILATOR_LINT_FLIST) $(VERILATOR_LINT_CONFIG) | $(VERILATOR_LINT_DIR)
	cd $(VERILATOR_LINT_DIR); $(VERILATOR) $(VERILATOR_LINT_OPTS) $(HDL_PARAMS) $(HDL_DEFINES) 2>&1 | tee -i $(VERILATOR_LINT_LOG)

clean_lint.verilator:
	rm -rf $(VERILATOR_LINT_DIR)

################
### Building ###
################

VERILATOR_BUILD_BIN = $(VERILATOR_BUILD_DIR)/sim.verilator

VERILATOR_TOP ?= testbench
# Max number of threads to run verilated model with
# TODO: untested beyond 1
VERILATOR_THREADS ?= 1
## Tool options
VERILATOR_DEFAULT_OPTS  = --cc                 # Output in C++
#VERILATOR_DEFAULT_OPTS += --debug --gdbbt     # Debugs and produces stack trace
VERILATOR_DEFAULT_OPTS += -O2
VERILATOR_DEFAULT_OPTS += --x-assign fast --x-initial fast
VERILATOR_DEFAULT_OPTS += --threads $(VERILATOR_THREADS)
VERILATOR_DEFAULT_OPTS += --top-module $(VERILATOR_TOP)
VERILATOR_DEFAULT_OPTS += -f $(VERILATOR_FLIST)
VERILATOR_DEFAULT_OPTS += $(VERILATOR_CONFIG)
VERILATOR_DEFAULT_OPTS += --binary
VERILATOR_DEFAULT_OPTS += -o sim.verilator
VERILATOR_DEFAULT_OPTS += -Wno-timescalemod
#VERILATOR_DEFAULT_OPTS += --assert

VERILATOR_OPTS ?= $(VERILATOR_DEFAULT_OPTS)

VERILATOR_BUILD_DEFAULT_OPTS  = --Wno-fatal --Wno-lint --Wno-style --Wno-widthconcat --Wno-unoptflat
VERILATOR_BUILD_DEFAULT_OPTS += -CFLAGS -std=c++17
VERILATOR_BUILD_DEFAULT_OPTS += -CFLAGS "-I$(BP_TOOLS_DIR)/dromajo/include"
VERILATOR_BUILD_DEFAULT_OPTS += -CFLAGS "-I$(BP_RTL_INSTALL_DIR)/include"
VERILATOR_BUILD_DEFAULT_OPTS += -CFLAGS "-I$(BASEJUMP_STL_DIR)/bsg_test"
VERILATOR_BUILD_DEFAULT_OPTS += $(BP_TOOLS_INSTALL_DIR)/lib/libdromajo_cosim.a
VERILATOR_BUILD_DEFAULT_OPTS += -CFLAGS "-DDROMAJO_COSIM"
VERILATOR_BUILD_DEFAULT_OPTS += -LDFLAGS "-lpthread"
VERILATOR_BUILD_DEFAULT_OPTS += -LDFLAGS "-L$(BP_RTL_INSTALL_DIR)/lib -ldramsim3 -Wl,-rpath=$(BP_RTL_INSTALL_DIR)/lib"
#VERILATOR_BUILD_DEFAULT_OPTS += -LDFLAGS "-L$(BP_RTL_INSTALL_DIR)/lib -ldromajo_cosim -Wl,-rpath=$(BP_RTL_INSTALL_DIR)/lib"

VERILATOR_BUILD_OPTS ?= $(VERILATOR_BUILD_DEFAULT_OPTS)

$(VERILATOR_CONFIG): | $(VERILATOR_BUILD_DIR)
build_config.verilator: $(VERILATOR_CONFIG)

$(VERILATOR_FLIST): | $(VERILATOR_BUILD_DIR)
build_flist.verilator: $(VERILATOR_FLIST)

build.verilator: $(VERILATOR_FLIST) $(VERILATOR_CONFIG) | $(VERILATOR_BUILD_DIR)
	cd $(VERILATOR_BUILD_DIR); $(VERILATOR) $(VERILATOR_OPTS) $(VERILATOR_BUILD_OPTS) $(HDL_PARAMS) $(HDL_DEFINES) 2>&1 | tee -i $(BUILD_LOG)

build_dump.verilator: VERILATOR_OPTS += --trace-fst
build_dump.verilator: VERILATOR_OPTS += --trace-structs
build_dump.verilator: VERILATOR_OPTS += --trace-depth 50
build_dump.verilator: HDL_DEFINES += +define+VERILATOR_TRACE=1
build_dump.verilator: build.verilator

clean_build.verilator:
	rm -rf $(VERILATOR_BUILD_DIR)

##################
### Simulation ###
##################

VERILATOR_OPTIONS ?=

VERILATOR_PLUSARGS ?=

pre_sim.verilator:

sim.verilator: | $(VERILATOR_SIM_DIR)
sim.verilator: build.verilator pre_sim.verilator
sim.verilator: $(VERILATOR_SIM_DIR)/run_sim.verilator
$(VERILATOR_SIM_DIR)/run_sim.verilator: | $(VERILATOR_SIM_DIR)
	#cp $(TEST_DIR)/$(PROG_NBF) $(VERILATOR_SIM_DIR)/$(PROG_NBF)
	#cp $(TEST_DIR)/$(PROG_ELF) $(VERILATOR_SIM_DIR)/$(PROG_ELF)
	cp $(VERILATOR_BUILD_DIR)/obj_dir/sim.verilator $(VERILATOR_SIM_DIR)/
	cd $(@D); ./sim.verilator $(VERILATOR_OPTIONS) $(VERILATOR_PLUSARGS) 2>&1 | tee -i $(VERILATOR_SIM_LOG)

sim_dump.verilator: VERILATOR_OPTS += --trace-fst
sim_dump.verilator: VERILATOR_OPTS += --trace-structs
sim_dump.verilator: VERILATOR_OPTS += --trace-depth 50
sim_dump.verilator: HDL_DEFINES += +define+VERILATOR_TRACE=1
sim_dump.verilator: sim.verilator

wave.verilator: $(VERILATOR_SIM_DIR)/wave.verilator
$(VERILATOR_SIM_DIR)/wave.verilator:
	$(GTKWAVE) -f $(@D)/dump.fst &

clean_sim.verilator:
	rm -rf $(VERILATOR_SIM_DIR)

##############
### Global ###
##############

$(VERILATOR_LINT_DIR) $(VERILATOR_BUILD_DIR) $(VERILATOR_SIM_DIR):
	mkdir -p $@

clean.verilator: clean_lint.verilator clean_build.verilator clean_sim.verilator
clean: clean.verilator

